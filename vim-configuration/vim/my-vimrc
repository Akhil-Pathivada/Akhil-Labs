
call plug#begin('~/.vim/plugged')
Plug 'scrooloose/nerdtree'
Plug 'fatih/molokai'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight' "nerd-tree syntax highlight
Plug 'ryanoasis/vim-devicons' "icons for nerd-tree
Plug 'preservim/nerdcommenter' "code-commenter
" Plug 'itchyny/lightline.vim' " highlights the mode line
Plug 'jiangmiao/auto-pairs' " for auto pairs
Plug 'vim-python/python-syntax'
Plug 'vim-syntastic/syntastic'
Plug 'fatih/vim-go', { 'do': ':GoUpdateBinaries' }
Plug 'junegunn/vim-easy-align'
call plug#end()

" NerdTree configuration....

" mapping for NerdTree toggle
nmap <C-n> :NERDTreeToggle<CR>

" Defines the NERDTreeWindowSize
let g:NERDTreeWinSize=36
let g:webdevicons_conceal_nerdtree_brackets = 0

" NerdTree confuguration to switch between panes
noremap <C-J> <C-W>j
noremap <C-K> <C-W>k
noremap <C-H> <C-W>h
noremap <C-L> <C-W>l

"mapping <ctrl + \> instead of <ctrl + w + w>
nnoremap <C-\> <C-w><C-w>

" Automatically opens NerdTree when no file was mentioned to open
" au vimenter * if !argc() | NERDTree | endif

" close vim if the only window left open is a NERDTree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" open NERDTree automatically when vim starts up if no files were specified
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" To differentiate between folder open && close
let g:DevIconsEnableFoldersOpenClose = 1
let g:NERDTreeHighlightFolders = 1
let g:NERDTreeHighlightFoldersFullName = 1

" Highlights file extensions along with file icon
let g:NERDTreeFileExtensionHighlightFullName = 1

" makes NerdTree to faster load
let g:NERDTreeLimitedSyntax = 1
let g:NERDTreeHighlightCursorline = 0

" NerdCommenter configuraion....

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code inden
let g:NERDDefaultAlign = 'left'

" Set a language to use its alternate delimiters by default
" let g:NERDAltDelims_java = 1

" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }

" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1

" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" Enable NERDCommenterToggle to check all selected lines is commented or not
let g:NERDToggleCheckAllLines = 1

let g:airline_powerline_fonts = 1

set number
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,gbk,cp936,latin-1
set fileformat=unix
set fileformats=unix,dos,mac
set cursorline
set nowrap
set smartcase
set smartindent
set incsearch
set ignorecase
set noswapfile
set hlsearch
set showmatch
set laststatus=2
set noerrorbells
set visualbell
" let g:gruvbox_contrast_dark = 'hard'
" colorscheme gruvbox8
let g:rehash256 = 1
" let g:molokai_original = 1
colorscheme molokai
set background=dark
set guifont=DroidSansMono_Nerd_Font:h11
" set guifont=Fira\ Code\ Medium\ 12
filetype on
filetype plugin on
filetype plugin indent on

" highlights line numbers
" highlight LineNr ctermfg=yellow

" enables copying to clipboard and paste && viceversa
nnoremap <C-y> "+y
vnoremap <C-y> "+y
nnoremap <C-p> "+gP
vnoremap <C-p> "+gP

"get different cursor shapes for different modes
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" Uncomment the following to have Vim jump to the last position when reopening a file
if has("autocmd")
  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
endif

" ruby path if you are using RVM
let g:ruby_path = system('rvm current')

" For Golang syntax highlighting
let g:go_highlight_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_operators = 1
let g:go_highlight_function_calls = 1
let g:go_fmt_command = "goimports"

" For Python syntax highlighting
let g:python_highlight_all = 1
syntax on

" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

